
//
//  MEDIA QUERIES
//––––––––––––––––––––––––––––––––––––––––––––––––––

// A map of breakpoints.
$breakpoints: (
  xs: 576px,
  sm: 768px,
  md: 992px,
  lg: 1200px
);


//
//  RESPOND ABOVE
//––––––––––––––––––––––––––––––––––––––––––––––––––

// @include respond-above(sm) {}
@mixin respond-above($breakpoint) {

  // If the breakpoint exists in the map.
  @if map-has-key($breakpoints, $breakpoint) {

    // Get the breakpoint value.
    $breakpoint-value: map-get($breakpoints, $breakpoint);

    // Write the media query.
    @media (min-width: $breakpoint-value) {
      @content;
    }
  
  // If the breakpoint doesn't exist in the map.
  } @else {

    // Log a warning.
    @warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}


//
//  RESPOND BELOW
//––––––––––––––––––––––––––––––––––––––––––––––––––

// @include respond-below(sm) {}
@mixin respond-below($breakpoint) {

  // If the breakpoint exists in the map.
  @if map-has-key($breakpoints, $breakpoint) {

    // Get the breakpoint value.
    $breakpoint-value: map-get($breakpoints, $breakpoint);

    // Write the media query.
    @media (max-width: ($breakpoint-value - 1)) {
      @content;
    }
  
  // If the breakpoint doesn't exist in the map.
  } @else {

    // Log a warning.
    @warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}


//
//  RESPOND BETWEEN
//––––––––––––––––––––––––––––––––––––––––––––––––––

// @include respond-between(sm, md) {}
@mixin respond-between($lower, $upper) {

  // If both the lower and upper breakpoints exist in the map.
  @if map-has-key($breakpoints, $lower) and map-has-key($breakpoints, $upper) {

    // Get the lower and upper breakpoints.
    $lower-breakpoint: map-get($breakpoints, $lower);
    $upper-breakpoint: map-get($breakpoints, $upper);

    // Write the media query.
    @media (min-width: $lower-breakpoint) and (max-width: ($upper-breakpoint - 1)) {
      @content;
    }
  
  // If one or both of the breakpoints don't exist.
  } @else {

    // If lower breakpoint is invalid.
    @if (map-has-key($breakpoints, $lower) == false) {

      // Log a warning.
      @warn 'Your lower breakpoint was invalid: #{$lower}.';
    }

    // If upper breakpoint is invalid.
    @if (map-has-key($breakpoints, $upper) == false) {

      // Log a warning.
      @warn 'Your upper breakpoint was invalid: #{$upper}.';
    }
  }
}

$primary: #D0341B;
$error: #DF3B29;
$gray: #a5a5a5;
$bg: #f4f6f8;
$black: #262626;

@import url('https://fonts.googleapis.com/css?family=Rubik&display=swap');

body {
  font-family: 'Rubik', sans-serif;
  font-style: normal; }

h1 {
font-weight: 800;
font-size: 32px;
line-height: 44px;
color: $primary;

}

h2 {
font-style: normal;
font-weight: 500;
font-size: 24px;
line-height: 33px;
color: $primary;
}

h3 {
  font-weight: 800;
font-size: 16px;
line-height: 22px;
color: $primary;
}

h4 {
  font-weight: 500;
font-size: 16px;
line-height: 21px;
color: $primary;
}

p {
  font-size: 16px;
  line-height: 30px;
}

body {
  background-color: white;
  color: black;
}

.loading {
  position: fixed;
  top: 0;
  z-index: 3000;
  background-color: white;
  width: 100vw;
  height: 100vh;
  transition: 0.5s ease all;
  display: flex;
  align-items: center;
  justify-content: center;

  &.hide {
    visibility: hidden;
    opacity: 0;
  }

  .lds-ripple {
    display: inline-block;
    position: relative;
    width: 64px;
    height: 64px;
  }
  .lds-ripple div {
    position: absolute;
    border: 4px solid $primary;
    opacity: 1;
    border-radius: 50%;
    animation: lds-ripple 1s cubic-bezier(0, 0.2, 0.8, 1) infinite;
  }
  .lds-ripple div:nth-child(2) {
    animation-delay: -0.5s;
  }
  @keyframes lds-ripple {
    0% {
      top: 28px;
      left: 28px;
      width: 0;
      height: 0;
      opacity: 1;
    }
    100% {
      top: -1px;
      left: -1px;
      width: 58px;
      height: 58px;
      opacity: 0;
    }
  }
  
}

.button {
  padding: 14px 24px;
  border: 0;
  font-weight: 800;
  font-size: 18px;
  display: flex;
  flex-direction: row;
  align-items: center;
  transition: all 0.2s ease-in-out;
  border-radius: 8px;
  justify-content: center;

  &.primary {
    background: $primary;
    color: white;
  }

  .button-icon {
    margin-right: 8px;
  }

  &:hover {
    background-color: darken($primary, 10%);
  }
}

a {
  &:hover {
    text-decoration: none;
  }
}

.desktop-nav {
  background-color: white;

  .nav-item {
    &.active {
      a {
        font-weight: 800;
      }
      
    }
  }
}

.mobile-nav {
  @include respond-above(xs) {
    display: none;
  }

  background-color: white;
  z-index: 1000;
  position: fixed;
  bottom: 0;
  width: 100%;
  display: flex;
  flex-direction: row;
  color: #000;
  box-shadow: 0px 4px 10px 5px rgba(0,0,0,0.05);
}

#home-header {
  width: 100%;
  height: 20vh;
  background-color: $bg;
}

section {
  width: 100%;

  &#main {
    display: flex;

    p {
      &.center{
        text-align: center;
      }
    }

    button {
      width: 100%;
    }

    .logo-home {
      align-self: center;
      width: 250px;
      margin-top: -125px;
      margin-bottom: 24px;
    }

    .home-content {
      display: flex;
      flex-direction: column;
      align-items: center;
    }
  }

}

#header {
  padding: 24px;
  background-color: $primary;
  color: white;

  &.question {
    background-color: $bg;
    color:$black;
  
    h1 {
      color:$black;
    }
    
  }

  .col-md-6 .col-xs-12 {
    padding: 0;
  }

  .logo {
    width: 50px;
    margin-bottom: 48px;
  }

  .challenge-img {
    width: 100%;
    margin-bottom: 24px;
  }

  h1 {
    color: white;
  }

  .call {
    display: block;
  }
}
  #main {
    padding: 24px;

    @include respond-above(xs) {
      padding: 24px 0;
    }
  }

.results {
  .challenge-img {
    margin-top: 20vh;
  }

  h3 {
    margin-top: 48px;
    margin-bottom: 18px;
  }
  .result {
    margin-bottom: 24px;

    .name {
      font-weight: 500;
font-size: 18px;
line-height: 19px;
color: $black;
margin-bottom: 4px;
    }
    .answer {
      font-size: 14px;
line-height: 21px;
color: $black;

    }
    .grade {
      font-size: 21px;
line-height: 21px;
font-weight: 700;
color: $primary;

    }
  }
}

.form {
  margin-top: 24px;

  .form-group {
    margin-bottom: 24px;
  }

  .form-control {
    border: 0;
    border-bottom: 1px solid $primary;
    border-radius: 0;
    margin-top: 4px;
    background-color: #f4f4f4;
    font-size: 18px;

    &:focus {
      border-bottom: 3px solid darken($primary, 10%);
      box-shadow: none;
      background-color: lighten($primary, 33%);
    }
  }
  
  input[textarea].form-control:focus {
    margin-bottom: -3px;
  }
  label {
    font-size: 18px;
    margin-bottom: 4px;
    color: lighten($primary, 10%);
  }
}

.alert {
  position: absolute;
  top: 0;
  width: 100%;
  padding: 32px 0px;
  display: flex;
  flex-direction: row;
  align-items: center;
  justify-content: center;
  z-index: 10000;

  .alert-text {
    margin-left: 16px;
    color: white;
  }

  &.success {
    background-color: $primary;
  }

  &.error {
    background-color: $error;
  }

  &.hide {
    display: none;
  }
}

footer {
  color: white;
  font-size: 12px;
  text-align: center;
  width: 100%;
  padding: 24px 0;
  background-color: #222;
}
.answer-option {

  margin-top: 32px;

  h4 {
    text-align: center;
    margin-top: 12px;
  }

  img {
    max-width: 150px;
  }
  input {
    visibility: hidden;
}
.form-check-label {
  box-sizing: border-box;
  border: 2px solid #fff;
  cursor: pointer;
  padding: 32px 32px 24px;
  border-radius: 8px;
  margin-left: -15px;
  transition: 0.4s ease all;
}

.form-check-input:checked ~ .form-check-label {
  border: 2px solid $primary;
  background-color: lighten($primary, 50%);
}
}


.form-check-label {
  display: flex;
flex-direction: column;

img {
  width: 100%;
}
}